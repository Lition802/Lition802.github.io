<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lition的博客</title>
  
  <subtitle>生活明朗万物可爱</subtitle>
  <link href="https://blog.lition.love/atom.xml" rel="self"/>
  
  <link href="https://blog.lition.love/"/>
  <updated>2023-12-10T05:45:24.466Z</updated>
  <id>https://blog.lition.love/</id>
  
  <author>
    <name>Lition</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言取数字的每一位</title>
    <link href="https://blog.lition.love/posts/59073.html"/>
    <id>https://blog.lition.love/posts/59073.html</id>
    <published>2023-12-10T05:20:56.000Z</published>
    <updated>2023-12-10T05:45:24.466Z</updated>
    
    <content type="html"><![CDATA[<p>常常有将一个正整数各位数字倒序排列或是统计各数字数目的题目，难点就在于如何分离出正整数中的每一位数字，本次以C语言为模板尝试一下。</p><h1 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h1><p>步骤：</p><ol><li>获得该正整数的第一位数字或最后一位数字（考虑到分离出首位数字后接下来的可能为零，因此选择首先分离末位数字）</li><li>对分离出一位数字的剩下数字组成的正整数重复上步操作。</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getNum</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> s=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    s=n%<span class="number">10</span>;           <span class="comment">//分离末位数字</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s);</span><br><span class="line">    getNum(n/<span class="number">10</span>);     <span class="comment">//对剩下数字递归</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> n;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">   getNum(n);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getNum</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="type">int</span> len=(<span class="type">int</span>)<span class="built_in">log10</span>(n)+<span class="number">1</span>;         <span class="comment">//获得n的位数 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s=n%<span class="number">10</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s);</span><br><span class="line">        n=n/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    getNum(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>while循环形式:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    j++;</span><br><span class="line">    n/=<span class="number">10</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常常有将一个正整数各位数字倒序排列或是统计各数字数目的题目，难点就在于如何分离出正整数中的每一位数字，本次以C语言为模板尝试一下。&lt;/p&gt;
&lt;h1 id=&quot;递归法&quot;&gt;&lt;a href=&quot;#递归法&quot; class=&quot;headerlink&quot; title=&quot;递归法&quot;&gt;&lt;/a&gt;递归法&lt;</summary>
      
    
    
    
    
    <category term="C语言" scheme="https://blog.lition.love/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>OSI七层模型</title>
    <link href="https://blog.lition.love/posts/60596.html"/>
    <id>https://blog.lition.love/posts/60596.html</id>
    <published>2023-12-02T05:15:45.000Z</published>
    <updated>2023-12-02T05:35:33.246Z</updated>
    
    <content type="html"><![CDATA[<p>马上要竞赛了，正好在这里复习一下OSI模型。</p><p><a href="https://imgse.com/i/pissZpF"><img src="https://z1.ax1x.com/2023/12/02/pissZpF.png" alt="pissZpF.png"></a></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>解决两个硬件之间怎么通信的问题，常见的物理媒介有光纤、电缆、中继器等。它主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。</p><p>它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输，到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。</p><p>设备：网卡、网线、集线器、中继器、调制解调器。</p><!-- 设备用：网桥（网桥的功能在延长网络跨度上类似于中继器，然而它能提供智能化连接服务，即根据帧的终点地址处于哪一网段来进行转发和滤除。网桥对站点所处网段的了解是靠**“自学习”**实现的）、交换机 --><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>在计算机网络中由于各种干扰的存在，物理链路是不可靠的。该层的主要功能就是：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p><p>它的具体工作是接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层。这一层的数据叫做帧。</p><p>设备：网桥、交换机。</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>计算机网络中如果有多台计算机，怎么找到要发的那台？如果中间有多个节点，怎么选择路径？这就是路由要做的事。</p><p>该层的主要任务就是：通过路由选择算法，为报文（该层的数据单位，由上一层数据打包而来）通过通信子网选择最适当的路径。这一层定义的是IP地址，通过IP地址寻址，所以产生了IP协议。</p><p>设备：路由器。</p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>当发送大量数据时，很可能会出现丢包的情况，另一台电脑要告诉是否完整接收到全部的包。如果缺了，就告诉丢了哪些包，然后再发一次，直至全部接收为止。</p><p>简单来说，传输层的主要功能就是：监控数据传输服务的质量，保证报文的正确传输。</p><p>设备：网关。</p><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>虽然已经可以实现给正确的计算机，发送正确的封装过后的信息了。但我们总不可能每次都要调用传输层协议去打包，然后再调用IP协议去找路由，所以我们要建立一个自动收发包，自动寻址的功能。于是会话层出现了：它的作用就是建立和管理应用程序之间的通信。</p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>表示层负责数据格式的转换，将应用处理的信息转换为适合网络传输的格式，或者将来自下一层的数据转换为上层能处理的格式。</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>应用层是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。前端同学对应用层肯定是最熟悉的。</p><h2 id="TCP-IP4层模型、5层模型和OSI七层模型的差别"><a href="#TCP-IP4层模型、5层模型和OSI七层模型的差别" class="headerlink" title="TCP&#x2F;IP4层模型、5层模型和OSI七层模型的差别"></a>TCP&#x2F;IP4层模型、5层模型和OSI七层模型的差别</h2><p><a href="https://imgse.com/i/pissKmR"><img src="https://z1.ax1x.com/2023/12/02/pissKmR.png" alt="pissKmR.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;马上要竞赛了，正好在这里复习一下OSI模型。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgse.com/i/pissZpF&quot;&gt;&lt;img src=&quot;https://z1.ax1x.com/2023/12/02/pissZpF.png&quot; alt=&quot;pissZpF.pn</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.lition.love/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>素质都是人给的</title>
    <link href="https://blog.lition.love/posts/18348.html"/>
    <id>https://blog.lition.love/posts/18348.html</id>
    <published>2023-12-01T16:35:33.000Z</published>
    <updated>2023-12-01T16:43:28.989Z</updated>
    
    <content type="html"><![CDATA[<p>都12点35了，还没睡着。</p><p>被同学吵的受不了了，拿起手机刷了刷知乎，搜索一下，大学宿舍太吵睡不着觉，居然发现了500多个回答。其中称完全不顾别人感受的室友比比皆是，一团和气的寝室终究是少数。</p><p>我感觉实在不行我也要搬出去住了，天天晚上至少要1点才能睡觉，一个外放爱奇艺一个连麦打游戏。我很诧异为什么除了我自己所在的寝室，都是和和睦睦的相处。</p><p>晚上用金山打字通敲了一个小时，英文输入的话大概速度是110&#x2F;分钟。算中等水平吧，打字员入门水平。感觉这个水平很难再往上提升了，再就是练练盲打和五笔。五笔的话一直找不到合适的时间去练习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;都12点35了，还没睡着。&lt;/p&gt;
&lt;p&gt;被同学吵的受不了了，拿起手机刷了刷知乎，搜索一下，大学宿舍太吵睡不着觉，居然发现了500多个回答。其中称完全不顾别人感受的室友比比皆是，一团和气的寝室终究是少数。&lt;/p&gt;
&lt;p&gt;我感觉实在不行我也要搬出去住了，天天晚上至少要1点才能</summary>
      
    
    
    
    
    <category term="日常" scheme="https://blog.lition.love/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>通过js判断网页失焦</title>
    <link href="https://blog.lition.love/posts/17908.html"/>
    <id>https://blog.lition.love/posts/17908.html</id>
    <published>2023-11-29T16:40:44.000Z</published>
    <updated>2023-12-01T16:26:47.066Z</updated>
    
    <content type="html"><![CDATA[<p>考试的时候看到考试软件有检测失焦的功能，切屏到一定次数会判定为不及格，好奇的了解了一下原理。</p><p>以下摘自W3school。</p><blockquote><p><code>onblur</code>是一个JavaScript事件，用于在元素失去焦点时触发特定的操作或函数。<code>onblur</code> 事件与 <code>onfocus</code> 事件相反。</p></blockquote><p>通过js监听<code>onfous</code>和<code>onblur</code>事件，自己尝试实现了一下。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> blurtime = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> focustime = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> isFirst = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onfocus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">focustime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>();</span><br><span class="line"><span class="keyword">let</span> second = (focustime - blurtime) / <span class="number">1000</span>;</span><br><span class="line">second = <span class="title class_">Math</span>.<span class="title function_">round</span>((second + <span class="title class_">Number</span>.<span class="property">EPSILON</span>) * <span class="number">10</span>) / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (!isFirst) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`请注意，你失去焦点了！总共离开<span class="subst">$&#123;second&#125;</span>秒`</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isFirst) &#123;</span><br><span class="line">isFirst = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">blurtime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>同时本页面也嵌入了这个代码，按下<code>F12</code>进入控制台即可看到输出。</p><script>console.log('加载成功，开始监听网页失焦');let blurtime=null;let focustime=null;let isFirst=true;window.onfocus=function(){focustime=new Date().valueOf();let second=(focustime-blurtime)/1000;second=Math.round((second+Number.EPSILON)*10)/10;if(!isFirst){console.log(`请注意，你失去焦点了！总共离开${second}秒`)}};window.onblur=function(){if(isFirst){isFirst=false}blurtime=new Date().valueOf()};</script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;考试的时候看到考试软件有检测失焦的功能，切屏到一定次数会判定为不及格，好奇的了解了一下原理。&lt;/p&gt;
&lt;p&gt;以下摘自W3school。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;onblur&lt;/code&gt;是一个JavaScript事件，用于在元素失去焦点时触发特定</summary>
      
    
    
    
    
    <category term="技术" scheme="https://blog.lition.love/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>迁移博客了</title>
    <link href="https://blog.lition.love/posts/1241.html"/>
    <id>https://blog.lition.love/posts/1241.html</id>
    <published>2023-11-29T02:26:03.000Z</published>
    <updated>2023-11-29T03:01:58.837Z</updated>
    
    <content type="html"><![CDATA[<p>博客有一年没打理了，现在回去看看感觉以前写的东西都是些无病呻吟，就删去了大半部分，换了个主题，好好写点技术类博客。</p><!more><p>主题从<code>butterfly</code>换成了<a href="https://github.com/lotabout/hexo-theme-noise"><code>noise</code></a>，看多了花里胡哨，现在只想要简洁。</p><p>不过这个主题问题还是蛮多的，年久失修，代码块超级丑，随便啦。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;博客有一年没打理了，现在回去看看感觉以前写的东西都是些无病呻吟，就删去了大半部分，换了个主题，好好写点技术类博客。&lt;/p&gt;
&lt;!more&gt;

&lt;p&gt;主题从&lt;code&gt;butterfly&lt;/code&gt;换成了&lt;a href=&quot;https://github.com/lotabou</summary>
      
    
    
    
    
    <category term="日常" scheme="https://blog.lition.love/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>C语言使用指针遍历数组</title>
    <link href="https://blog.lition.love/posts/53687.html"/>
    <id>https://blog.lition.love/posts/53687.html</id>
    <published>2023-11-27T11:26:48.000Z</published>
    <updated>2023-12-01T16:56:35.718Z</updated>
    
    <content type="html"><![CDATA[<p>今天上C语言课踩了个坑，我以为使用指针操作数组中的元素时，+1代表偏移一位，没想到是偏移一个内存单元。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></div><p>对于这个数组，只需要下面的代码就可以进行遍历。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=arr; 指针指向数组首个元素</span><br><span class="line"><span class="comment">// 这里直接写死遍历4次</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*p); <span class="comment">// 在这里可以进行操作</span></span><br><span class="line">    p++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天上C语言课踩了个坑，我以为使用指针操作数组中的元素时，+1代表偏移一位，没想到是偏移一个内存单元。&lt;/p&gt;
&lt;div class=&quot;highlight-wrap&quot;autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;o</summary>
      
    
    
    
    
    <category term="C语言" scheme="https://blog.lition.love/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
